option k = 2;
option auto = true;

syn code_asm	: STRING for INSTS, INST;
inh tds_asm		: VariableTable for ASM, INSTS, INST, PAR, PARS, PARSX, VARIABLE;
inh mach_asm	:	AbstractMachine for ASM, INSTS, INST, PAR, PARS, PARSX, NUMBER, ADDR, ADDRSEC, REGISTER, NUMBER;
inh parlist		: List<Object> for PAR, PARS, PARSX;

-- Separators
sugar	separ		is	"[\t ]+";
sugar nl			is	"(\n|\r)";
sugar	column	is	"\:";
sugar semicol	is	";";
sugar coma		is	",";
sugar excl		is 	"!";
sugar equ			is 	"=";
sugar	sharp		is	"#";
sugar dollar  is  "\$";
sugar point		is 	"\.";
sugar minus		is	"\-";
sugar plus		is	"\+";
sugar	obrack	is	"\[";
sugar cbrack	is 	"\]";
sugar ocbrack	is	"\{";
sugar ccbrack	is	"\}";
sugar commbeg is  "\/\/";

-- Opcodes
sugar	adc				"ADC";	
sugar	add				"ADD";	
sugar	adr				"ADR";	
sugar	and				"AND";	
sugar	asr				"ASR";	
sugar	bfc				"BFC";	
sugar	bfi				"BFI";	
sugar bic				"BIC";	
sugar	b					"B";		
sugar	bl				"BL";		
sugar	blx				"BLX";	
sugar	bx				"BX";		
sugar	bxj				"BXJ";		
sugar	cbnz			"CBNZ";		
sugar	cbz				"CBZ";		
sugar	cdp				"CDP";		
sugar	cdp2			"CDP2";		
sugar clrex			"CLREX";		
sugar	clz				"CLZ";
sugar cmn				"CMN";
sugar cmp				"CMP";
sugar	cps				"CPS";
sugar	dbg				"DBG";
sugar dmb				"DMB";
sugar dsb				"DSB";
sugar	eor				"EOR";
sugar	eret			"ERET";
sugar	hvc				"HVC";
sugar isb				"ISB";
sugar it				"IT";
sugar ld				"LD";
sugar lsl				"LSL";
sugar lsr				"LSR";
sugar mcr				"MCR";
sugar mcr2			"MCR2";
sugar mcrr			"MCRR";
sugar mcrr2			"MCRR2";
sugar mla				"MLA";
sugar mls				"MLS";
sugar mov				"MOV";
sugar movt			"MOVT";
sugar mrc				"MRC";
sugar mrc2			"MRC2";
sugar mrrc			"MRRC";
sugar mrrc2			"MRRC2";
sugar mrs				"MRS";
sugar mul				"MUL";
sugar mvn				"MVN";
sugar neg				"NEG";
sugar nop				"NOP";
sugar orn				"ORN";
sugar orr				"ORR";
sugar pkh				"PKH";
sugar pld				"PLD";
sugar pldw			"PLDW";
sugar pli				"PLI";
sugar pop				"POP";
sugar push			"PUSH";
sugar qadd			"QADD";
sugar qadd16		"QADD16";
sugar qadd8			"QADD8";
sugar qasx			"QASX";
sugar qdadd			"QDADD";
sugar qdsub			"QDSUB";
sugar qsax			"QSAX";
sugar qsub			"QSUB";
sugar qsub16		"QSUB16";
sugar qsub8			"QSUB8";
sugar rbit			"RBIT";
sugar rev				"REV";
sugar rev16			"REV16";
sugar revsh			"REVSH";
sugar rfe				"RFE";
sugar ror				"ROR";
sugar rrx				"RRX";
sugar rsb				"RSB";
sugar rsc				"RSC";
sugar sadd16		"SADD16";
sugar sadd8			"SADD8";
sugar sasx			"SASX";
sugar sbc				"SBC";
sugar sbfx			"SBFX";
sugar sdiv			"SDIV";
sugar sel				"SEL";
sugar sev				"SEV";
sugar shadd16		"SHADD16";
sugar shadd8		"SHADD8";
sugar shasx			"SHASX";
sugar shsub16		"SHSUB16";
sugar shsub8		"SHSUB8";
sugar sm				"SM";
sugar smc				"SMC";
sugar srs				"SRS";
sugar ssat			"SSAT";
sugar ssat16		"SSAT16";
sugar ssax			"SSAX";
sugar ssub16		"SSUB16";
sugar ssub8			"SSUB8";
sugar st				"ST";
sugar sub				"SUB";
sugar svc				"SVC";
sugar swp				"SWP";
sugar swpb			"SWPB";
sugar sxtab			"SXTAB";
sugar sxtab16		"SXTAB16";
sugar	sxtah			"SXTAH";
sugar sxtb			"SXTB";
sugar sxtb16		"SXTB16";
sugar sxth			"SXTH";
sugar tbb				"TBB";
sugar tbh				"TBH";
sugar teq				"TEQ";
sugar tst				"TST";
sugar uadd16		"UADD16";
sugar uadd8			"UADD8";
sugar uasx			"UASX";
sugar ubfx			"UBFX";
sugar udf				"UDF";
sugar udiv			"UDIV";
sugar uhadd16		"UHADD16";
sugar uhadd8		"UHADD8";
sugar uhasx			"UHASX";
sugar uhsax			"UHSAX";
sugar uhsub16		"UHSUB16";
sugar uhsub8		"UHSUB8";
sugar umaal			"UMAAL";
sugar umlal			"UMLAL";
sugar umull			"UMULL";
sugar uqadd16		"UQADD16";
sugar uqadd8		"UQADD8";
sugar uqasx			"UQASX";
sugar uqsax			"UQSAX";
sugar usqub16		"USQUB16";
sugar uqsub8		"UQSUB8";
sugar usad8			"USAD8";
sugar usada8		"USADA8";
sugar usat			"USAT";
sugar usat16		"USAT16";
sugar usax			"USAX";
sugar usub16		"USUB16";
sugar usub8			"USUB8";
sugar uxtab			"UXTAB";
sugar uxtah			"UXTAH";
sugar uxtb			"UXTB";
sugar uxtb16		"UXTB16";
sugar uxth			"UXTH";
sugar vaba			"VABA";
sugar vabal			"VABAL";
sugar vabd			"VABD";
sugar vabdl			"VABDL";
sugar vacge			"VACGE";
sugar vacgt			"VACGT";
sugar vacle			"VACLE";
sugar vaclt			"VACLT";
sugar vceq			"VCEQ";
sugar vcge			"VCGE";
sugar vcgt			"VCGT";
sugar vcle			"VCLE";
sugar vcls			"VCLS";
sugar vclt			"VCLT";
sugar vcmpe			"VCMPE";
sugar vcnt			"VCNT";
sugar vcvt			"VCVT";
sugar vcvtr			"VCVTR";
sugar vcvtb			"VCVTB";
sugar vcvtt			"VCVTT";
sugar vdup			"VDUP";
sugar vfma			"VFMA";
sugar vfms			"VFMS";
sugar vfnma			"VFNMA";
sugar vfnms			"VFNMS";
sugar vhadd			"VHADD";
sugar vhsub			"VHSUB";
sugar vld1			"VLD1";
sugar vld2			"VLD2";
sugar vld3			"VLD3";
sugar vld4			"VLD4";
sugar vmax			"VMAX";
sugar vmin			"VMIN";
sugar vmla			"VMLA";
sugar vmlal			"VMLAL";
sugar vmls			"VMLS";
sugar vmlsl			"VMLSL";
sugar vmovl			"VMOVL";
sugar vmovn			"VMOVN";
sugar vmull			"VMULL";
sugar vnmla			"VNMLA";
sugar vnmls			"VNMLS";
sugar vnmul			"VNMUL";
sugar vpadal		"VPADAL";
sugar vpadd			"VPADD";
sugar vpaddl		"VPADDL";
sugar vpmax			"VPMAX";
sugar vpmin			"VPMIN";
sugar vraddhn		"VRADDHN";
sugar vrecpe		"VRECPE";
sugar vrecps		"VRECPS";
sugar vrev16		"VREV16";
sugar vrev32		"VREV32";
sugar vrev64		"VREV64";
sugar vrhadd		"VRHADD";
sugar vrshl			"VRSHL";
sugar vrshr			"VRSHR";
sugar vrshrn		"VRSHRN";
sugar vrsqrte		"VRSQRTE";
sugar vrsqrts		"VRSQRTS";
sugar vrsra			"VRSRA";
sugar vrsubhn		"VRSUBHN";
sugar vshl			"VSHL";
sugar vshll			"VSHLL";
sugar vshr			"VSHR";
sugar vshrn			"VSHRN";
sugar vsli			"VSLI";
sugar vsqrt			"VSQRT";
sugar vsra			"VSRA";
sugar vsri			"VSRI";
sugar vst1			"VST1";
sugar vst2			"VST2";
sugar vst3			"VST3";
sugar vst4			"VST4";
sugar vsubhn		"VSUBHN";
sugar vsubl			"VSUBL";
sugar vsubw			"VSUBW";
sugar vtbl			"VTBL";
sugar vtbx			"VTBX";
sugar vtrn			"VTRN";
sugar vuzp			"VUZP";
sugar vzip			"VZIP";
sugar wfe				"WFE";
sugar wfi				"WFI";
sugar yield			"YIELD";
sugar v					"V";

-- Load and store instructions
sugar ls_c		"C";
sugar	ls_c2		"C2";
sugar ls_ia		"IA";
sugar ls_fd		"FD";
sugar ls_da		"DA";
sugar ls_fa		"FA";
sugar ls_db		"DB";
sugar ls_ea		"EA";
sugar ls_ib		"IB";
sugar ls_ed		"ED";
sugar ls_r		"R";
sugar ls_m		"M";
sugar ls_b		"B";
sugar ls_d		"D";
sugar ls_h		"H";
sugar ls_bt		"BT";
sugar ls_ht		"HT";
sugar ls_ex		"EX";
sugar ls_s		"S";

-- signed multiplication instructions
sugar sm_l		"L";
sugar sm_a		"A";
sugar sm_m		"M";
sugar sm_u		"U";
sugar sm_d		"D";
sugar sm_s		"S";
sugar sm_bb		"BB";
sugar sm_bt		"BT";
sugar sm_tb		"TB";
sugar sm_tt		"TT";
sugar sm_sd		"SD";
sugar sm_sld	"SLD";
sugar sm_ad		"AD";

-- Conditions and suffixes
sugar	eq	"EQ";
sugar ne	"NE";
sugar cs	"CS";
sugar cc	"CC";
sugar mi	"MI";
sugar pl	"PL";
sugar vs	"VS";
sugar vc	"VC";
sugar hi	"HI";
sugar ls	"LS";
sugar ge	"GE";
sugar lt	"LT";
sugar gt	"GT";
sugar le	"LE";
sugar al	"AL";
sugar	s		"S";

-- Shift types
sugar st_asr	"ASR";
sugar st_lsl	"LSL";
sugar st_lsr	"LSR";
sugar st_ror	"ROR";

-- Registers
sugar	sp	"sp";
sugar lr	"lr";
sugar pc	"pc";
sugar ht	"ht";
sugar oi	"oi";
sugar sb	"sb";
sugar fr	"fr";

-- Terms
term	str			is	"\"([^\"]|\\.)*\"";
term 	num			is	"((\-|\+)?[0-9]+|0x[0-9a-fA-F]+|0b[0-1]+)";
term	var			is	"[A-Za-z][A-Za-z0-9_]*";
term  ident		is	"[0-9a-zA-Z_\$@#\.\?\<\>]+";
term	direct	is	"\.[a-z0-9_\.]+";
term	genreg	is	"r[0-9]";
term 	comm 		is	"[^\n]*\n";

-- Rules
ASM -> ocbrack #init INSTS ccbrack #gen ;
#init {
    INSTS^mach_asm := ASM^mach_asm;
    INSTS^tds_asm := ASM^tds_asm;
}

#gen {
    do
        ASM^code_asm := ASM^mach_asm.generateComment("Inline ASM", "\t\t") + INSTS^code_asm;
    end
}

-- Instructions and opcode
INSTS -> #init INST INSTS #gen ;
#init {
    do
        INST^tds_asm := INSTS^tds_asm;
    INSTS1^tds_asm := INSTS^tds_asm;
    end
}

#gen {
    do
        INSTS^code_asm := INST^code_asm + "\n" + INSTS1^code_asm;
    end
}

INST -> space nl #gen ;
#gen {
    do
        INST^code := "\n";
    end
}

INST -> OPCODE S CC space #init PARS #gen ;
#init {
    do
        PARS^parlist := new ArrayList<Object>();
    PARS^tds_asm := INST^tds_asm;
    end
}

#gen {
    do
        INST^code_asm := INST^mach_asm.generateInstruction(OPCODE^code_asm + S^code_asm + CC^code_asm, PARS^parlist) + "\n";
    end
}

INST -> commbeg comm #gen ;
#gen {
    do
        INST^code := INST^mach_asm.generateComment(comm^txt);
    end
}

OPCODE -> SM #gen ;
#gen {
    do
        OPCODE^code_asm := SM^asm;
    end
}

OPCODE -> LDSTR #gen ;
#gen {
    do
        OPCODE^code_asm := LDSTR^asm;
    end
}

OPCODE -> VINST #gen ;
#gen {
    do
        OPCODE^code_asm := VINST^asm;
    end
}

OPCODE -> NINST #gen ;
#gen {
    do
        OPCODE^code_asm := NINST^asm;
    end
}

-- Parameters
PARS -> space ;
--#gen {
    --do
        --	PARS^code_asm := "":
        --end
        --}

        PARS -> #init PAR #gen PARSX ;
#init {
    do
        PARSX^parlist := PARS^parlist;
    PARSX^tds_asm := PARS^tds_asm;
    end
}

#gen {
    do
        PARS^parlist.add(PAR^code_asm);
    end
}

PARSX -> space ;

PARSX -> space coma space #init PAR #gen PARSX ;
#init {
    do
        PAR^tds_asm := PARSX^tds_asm;
    PARSX1^tds_asm := PARSX^tds_asm;
    end
}

#gen {
    do
        PARSX^parlist.add(PAR^code_asm);
    PARSX1^parlist := PARSX^parlist;
    end
}

PAR -> #init ADDR #gen ;
#init {
    do
        ADDR^tds_asm := PAR^tds_asm;
    end
}

#gen {
    do
        PAR^code_asm := ADDR^code_asm;
    end
}

PAR -> SHIFTOP REGISTER #gen ;
#gen {
    do
        PAR^code_asm := SHIFTOP^code_asm + REGISTER^code_asm;
    end
}

PAR -> SHIFTOP NUMBER #gen ;
#gen {
    do
        PAR^code_asm := SHIFTOP^code_asm + REGISTER^code_asm;
    end
}

-- Shift operations
SHIFTOP -> #gen ;
#gen {
    do
        SHIFTOP^code_asm := "";
    end
}

SHIFTOP -> SHIFTTYPE space #gen ;
#gen {
    do
        SHIFTOP^code_asm := SHIFTTYPE^code_asm + " ";
    end;
}

SHIFTTYPE -> st_asr #gen ;
#gen {
    do
        SHIFTTYPE^code_asm := st_asr^txt;
    end
}

SHIFTTYPE -> st_lsl #gen ;
#gen {
    do
        SHIFTTYPE^code_asm := st_lsl^txt;
    end
}

SHIFTTYPE -> st_lsr #gen ;
#gen {
    do
        SHIFTTYPE^code_asm := st_lsr^txt;
    end
}

SHIFTTYPE -> st_ror #gen ;
#gen {
    do
        SHIFTTYPE^code_asm := st_ror^txt;
    end
}


-- An address can be of the form :
-- 		[Reg]
--		[Reg, Reg]
--		[Reg, #<num>]
-- With an optionnal additionnal '!'
ADDR -> obrack space #init REGISTER space ADDRSEC space cbrack ADDRSUFF #gen ;
#init {
do
    REGISTER^mach_asm := ADDR^mach_asm;
    ADDRSEC^mach_asm := ADDR^mach_asm;
end
}

#gen {
    do
        ADDR^code_asm := "[" + REGISTER^code_asm + ADDRSEC^code_asm + "]" + ADDRSUFF^code_asm;
    end
}

ADDR -> VARIABLE #gen;
#gen {
    do
        VARIABLE^tds_asm := ADDR^tds_asm;
    end
}

ADDRSEC -> #gen ;
#gen {
    do
        ADDRSEC^code_asm := "";
    end
}

ADDRSEC -> coma space #init REGISTER #gen ;
#init {
do
    REGISTER^mach_asm := ADDRSEC^mach_asm;
end
}

#gen {
do
    ADDRSEC^code_asm := ", " + REGISTER^code_asm;
end
}

ADDRSEC -> coma space #init NUMBER #gen ;
#init {
do
    NUMBER^mach_asm := ADDRSEC^mach_asm;
end
}

#gen {
do
    ADDRSEC^code_asm := NUMBER^code_asm;
end
}

ADDRSUFF -> excl #gen ;
#gen {
do
    ADDRSUFF^code_asm := "!";
end
}

ADDRSUFF -> #gen ;
#gen {
do
    ADDRSUFF^code_asm := "";
end
}

-- Variables
VARIABLE -> sharp var #gen ;
#gen {
do
    -- TODO
end
}

-- Numbers
NUMBER -> dollar num #gen ;
#gen {
do
    NUMBER^code_asm := NUMBER^mach_asm.generateDirect(num^txt);
end
}

-- Registers
REGISTER -> genreg #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(genreg^txt);
end
}

REGISTER -> sp #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(sp^txt);
end
}

REGISTER -> lr #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(lr^txt);
end
}

REGISTER -> pc #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(pc^txt);
end
}

REGISTER -> ht #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(ht^txt);
end
} 

REGISTER -> oi #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(oi^txt);
end
}

REGISTER -> sb #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(sb^txt);
end
} 

REGISTER -> fr #gen ;
#gen {
do
    REGISTER^code_asm := REGISTER^mach_asm.generateRegister(fr^txt);
end
} 


NINST ->	adc ;
NINST ->	add ;
NINST ->	adr ;
NINST ->	and ;
NINST ->	asr ;
NINST ->	bfc ;
NINST ->	bfi ;
NINST -> bic ;
NINST ->	b ;
NINST ->	bl ;
NINST ->	blx ;
NINST ->	bx ;
NINST ->	bxj ;
NINST ->	cbnz ;
NINST ->	cbz ;
NINST ->	cdp ;
NINST ->	cdp2 ;
NINST -> clrex ;
NINST ->	clz ;
NINST -> cmn ;
NINST -> cmp ;
NINST ->	cps ;
NINST ->	dbg ;
NINST -> dmb ;
NINST -> dsb ;
NINST ->	eor ;
NINST ->	eret ;
NINST ->	hvc ;
NINST -> isb ;
NINST -> it ;
NINST -> ld ;
NINST -> lsl ;
NINST -> lsr ;
NINST -> mcr ;
NINST -> mcr2 ;
NINST -> mcrr ;
NINST -> mcrr2 ;
NINST -> mla ;
NINST -> mls ;
NINST -> mov ;
NINST -> movt ;
NINST -> mrc ;
NINST -> mrc2 ;
NINST -> mrrc ;
NINST -> mrrc2 ;
NINST -> mrs ;
NINST -> mul ;
NINST -> mvn ;
NINST -> neg ;
NINST -> nop ;
NINST -> orn ;
NINST -> orr ;
NINST -> pkh ;
NINST -> pld ;
NINST -> pldw ;
NINST -> pli ;
NINST -> pop ;
NINST -> push ;
NINST -> qadd ;
NINST -> qadd16 ;
NINST -> qadd8 ;
NINST -> qasx ;
NINST -> qdadd ;
NINST -> qdsub ;
NINST -> qsax ;
NINST -> qsub ;
NINST -> qsub16 ;
NINST -> qsub8 ;
NINST -> rbit ;
NINST -> rev ;
NINST -> rev16 ;
NINST -> revsh ;
NINST -> rfe ;
NINST -> ror ;
NINST -> rrx ;
NINST -> rsb ;
NINST -> rsc ;
NINST -> sadd16 ;
NINST -> sadd8 ;
NINST -> sasx ;
NINST -> sbc ;
NINST -> sbfx ;
NINST -> sdiv ;
NINST -> sel ;
NINST -> sev ;
NINST -> shadd16 ;
NINST -> shadd8 ;
NINST -> shasx ;
NINST -> shsub16 ;
NINST -> shsub8 ;
NINST -> sm ;
NINST -> smc ;
NINST -> srs ;
NINST -> ssat ;
NINST -> ssat16 ;
NINST -> ssax ;
NINST -> ssub16 ;
NINST -> ssub8 ;
NINST -> st ;
NINST -> sub ;
NINST -> svc ;
NINST -> swp ;
NINST -> swpb ;
NINST -> sxtab ;
NINST -> sxtab16 ;
NINST ->	sxtah ;
NINST -> sxtb ;
NINST -> sxtb16 ;
NINST -> sxth ;
NINST -> tbb ;
NINST -> tbh ;
NINST -> teq ;
NINST -> tst ;
NINST -> uadd16 ;
NINST -> uadd8 ;
NINST -> uasx ;
NINST -> ubfx ;
NINST -> udf ;
NINST -> udiv ;
NINST -> uhadd16 ;
NINST -> uhadd8 ;
NINST -> uhasx ;
NINST -> uhsax ;
NINST -> uhsub16 ;
NINST -> uhsub8 ;
NINST -> umaal ;
NINST -> umlal ;
NINST -> umull ;
NINST -> uqadd16 ;
NINST -> uqadd8 ;
NINST -> uqasx ;
NINST -> uqsax ;
NINST -> usqub16 ;
NINST -> uqsub8 ;
NINST -> usad8 ;
NINST -> usada8 ;
NINST -> usat ;
NINST -> usat16 ;
NINST -> usax ;
NINST -> usub16 ;
NINST -> usub8 ;
NINST -> uxtab ;
NINST -> uxtah ;
NINST -> uxtb ;
NINST -> uxtb16 ;
NINST -> uxth ;
NINST -> wfe ;
NINST -> wfi ;
NINST -> yield ;

VINST -> v NINST ;
VINST -> vaba ;
VINST -> vabal ;
VINST -> vabd ;
VINST -> vabdl ;
VINST -> vacge ;
VINST -> vacgt ;
VINST -> vacle ;
VINST -> vaclt ;
VINST -> vceq ;
VINST -> vcge ;
VINST -> vcgt ;
VINST -> vcle ;
VINST -> vcls ;
VINST -> vclt ;
VINST -> vcmpe ;
VINST -> vcnt ;
VINST -> vcvt ;
VINST -> vcvtr ;
VINST -> vcvtb ;
VINST -> vcvtt ;
VINST -> vdup ;
VINST -> vfma ;
VINST -> vfms ;
VINST -> vfnma ;
VINST -> vfnms ;
VINST -> vhadd ;
VINST -> vhsub ;
VINST -> vld1 ;
VINST -> vld2 ;
VINST -> vld3 ;
VINST -> vld4 ;
VINST -> vmax ;
VINST -> vmin ;
VINST -> vmla ;
VINST -> vmlal ;
VINST -> vmls ;
VINST -> vmlsl ;
VINST -> vmovl ;
VINST -> vmovn ;
VINST -> vmull ;
VINST -> vnmla ;
VINST -> vnmls ;
VINST -> vnmul ;
VINST -> vpadal ;
VINST -> vpadd ;
VINST -> vpaddl ;
VINST -> vpmax ;
VINST -> vpmin ;
VINST -> vraddhn ;
VINST -> vrecpe ;
VINST -> vrecps ;
VINST -> vrev16 ;
VINST -> vrev32 ;
VINST -> vrev64 ;
VINST -> vrhadd ;
VINST -> vrshl ;
VINST -> vrshr ;
VINST -> vrshrn ;
VINST -> vrsqrte ;
VINST -> vrsqrts ;
VINST -> vrsra ;
VINST -> vrsubhn ;
VINST -> vshl ;
VINST -> vshll ;
VINST -> vshr ;
VINST -> vshrn ;
VINST -> vsli ;
VINST -> vsqrt ;
VINST -> vsra ;
VINST -> vsri ;
VINST -> vst1 ;
VINST -> vst2 ;
VINST -> vst3 ;
VINST -> vst4 ;
VINST -> vsubhn ;
VINST -> vsubl ;
VINST -> vsubw ;
VINST -> vtbl ;
VINST -> vtbx ;
VINST -> vtrn ;
VINST -> vuzp ;
VINST -> vzip ;

-- Conditions
CC -> eq ;
CC -> ne ;
CC -> cs ;
CC -> cc ;
CC -> mi ;
CC -> pl ;
CC -> vs ;
CC -> vc ;
CC -> hi ;
CC -> ls ;
CC -> ge ;
CC -> lt ;
CC -> gt ;
CC -> le ;
CC -> al ;
CC -> ;

-- Change condition codes
S -> s ;
S -> ;

-- Signed multiplications
SM -> sm SMX ;

SMX -> sm_l SMLX ;
SMX -> sm_m SMMX ;
SMX -> sm_u SMUX ;

SMXL -> sm_a SMXLA ;
SMXL -> sm_sd ;
SMXL -> sm_sld ;

SMXLA -> SMBT ;
SMXLA -> SMW ;
SMXLA -> sm_l SMBT ;
SMXLA -> sm_l ;

SMMX -> sm_ul ;
SMMX -> sm_l SMMLX ;

SMMLX -> sm_a ;
SMMLX -> sm_s ;

SMUX -> sm_sd ;
SMUX -> sm_ad ;
SMUX -> sm_l SMULX ;

SMULX -> SMBT ;
SMULX -> sm_l ;
SMULX -> SMW ;

SMBT -> sm_bb ;
SMBT -> sm_bt ;
SMBT -> sm_tb ;
SMBT -> sm_tt ;
SMBT -> sm_d ;

SMW -> sm_wb ;
SMW -> sm_wt ;

-- Load and store instructions
LDSTR -> ld LSX ;

LSX -> ls_r LSRX ;
LSX -> ls_c ;
LSX -> ls_c2 ;
LSX -> ls_m LSMX ;

LSRX -> ls_ex LSRXX ;
LSRX -> ls_s LSRXX ;
LSRX -> LSRXX ;

LSRXX -> ls_b ;
LSRXX -> ls_d ;
LSRXX -> ls_h ;
LSRXX -> ls_bt ;
LSRXX -> ls_ht ;
LSRXX -> ;

LSMX -> ls_ia ;
LSMX -> ls_fd ;
LSMX -> ls_da ;
LSMX -> ls_fa ;
LSMX -> ls_db ;
LSMX -> ls_ea ;
LSMX -> ls_ib ;
LSMX -> ls_ed ;
LSMX -> ;


