----------------------------------------------------
-- Grammaires de MC  et MCS                       --
----------------------------------------------------

-- TODO : - lors de déclarations, on doit aussi vérifier dans talias.

--options
option auto = true;
option version = 0.0.1;
option k=2;
--attributes 

-- le fichier source
inh source : MCSSourceFile for PROGRAMME;
-- la machine cible pour la generation de code
inh machine : IMachine for 
         ENTITES, ENTITE, DECL, FONCTION, INST, BLOC, INSTS, SIX,
         PARFS, PARF, PARFSX, ES, ESX, 
         E, AFFX, A, AX, R, RX, T, TX, F,FX
--         -- decommenter la ligne suivante pour MCS
--       , BASE, DEFS, DEF
--         -- fin extension MCS
         ;

-- TODO : Verifier que les attributs sont bien def.

inh tvar : VariableTable for  -- A completer --
         ENTITES, ENTITE, F
         ;

syn tvarS : VariableTable for 
         PARFS, DECL, ENTITE
         ; -- Utilisée pour récupérer la TDS màj avec les paramètres de la fonction.

inh talias : AliasTable for  -- A completer --
         ENTITES, ENTITE, TYPE
         ; --Table des alias contenant les types propres au programme.


inh tfun : FunctionTable for -- A completer --
         ENTITES, ENTITE
	 ;

syn tfunS : FunctionTable for 
         DECL, ENTITE
         ;

syn type : Type for -- A completer --
         TYPE, STYPE, PTRS, DECL, FONCTION
         ;
 
inh typeH : Type for -- A Modifier --
         PTRS, INSTS, BLOC, INST, DECL, FONCTION, SIX
         ;

inh funInfoH : FunctionInfo for
         PARFS, PARFSX
				 ;

syn funInfo : FunctionInfo for
         PARFS, PARFSX
	       ;

-- Attribut servant à savoir du quantième paramètre il s'agit. 
inh cParam : int for
         PARFS, PARF, PARFSX
				 ;

inh nom : String for -- A completer (pas sur) --
         DECL, FONCTION
         ;

syn code : String for
         
				 ;

syn op : Operator for
				 OPADD, OPMULT, OPUN, RX
				 ;

syn oprel : RelationalOperator for
				 OPREL
				 ;

syn reg : Register for
				 F, T, RX
				 ;

syn estVar : boolean for
         -- Des trucs dans les expressions. --
				 ;

inh affPossible : boolean for
                                 AFFX
                                 ;

-- ces attributs permettent de recuperer les instructions du code ASM inline       
syn code_asm : STRING for ASM;
-- la TDS courante
inh tds_asm : TDS for ASM;

--terminals
space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar virg is  ",";
sugar pt is "\.";
sugar pv is  "\;";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar asm is  "asm";
sugar int is  "int";
sugar char is  "char";
sugar struct is "struct";
sugar typedef is "typedef";
-- decommenter pour MCS
--sugar ref is "ref" ;
--sugar out is "out";
--sugar namespace is "namespace";
--sugar using is "using";
--sugar class is "class";
--sugar public is "public" ;
--sugar private is "private";
--sugar dpts is "\:";
--sugar bool is "bool";
--sugar true is "true";
--sugar false is "false";
--sugar this is "this";
--sugar new is "new" ;
--sugar null2 is "null";
--sugar base is "base" ;
-- 
sugar retour is  "return";
sugar arrow is "\-\>";
sugar null is  "NULL";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
term entier is  "[0-9]+";
term caractere is  "\'[^\']\'";
term chaine is  "\"[^\"]*\"";
term ident is  "[a-z][_0-9A-Za-z]*";
term identc is  "[A-Z][_0-9A-Za-z]*";

-- pour les instructions en assembleur TAM 'inline'
compil ASM;

-- (1) : REGLES DE PRODUCTION
PROGRAMME -> #init #initTDS ENTITES #gen;
global
   machine : IMachine;
-- Transmission de la machine cible  (choisie par l'option -m au lancement) 
#init {
local
do
   machine := PROGRAMME^source.getMachine();
   if machine = null then
     error(NO_MACH, PROGRAMME^source.getMachName());
   else
     ENTITES^machine := machine;
   end
end
}

-- Initialisation des TDS sans parent.
#initTDS {
local
do
  ENTITES^tvar := new VariableTable();
  ENTITES^tfun := new FunctionTable();
  ENTITES^talias := new AliasTable();
end
}
-- Ecrit le code dans un fichier
#gen {
local
do
   machine.writeCode(PROGRAMME^source.getFileName(), ENTITES^code);  
end
}

-- (2)
ENTITES -> #code ;

-- Fin du code.
#code {
local
do
  ENTITES^code := "";
end
}

-- (3)
ENTITES -> #passAH ENTITE #transmissionTDS ENTITES #passCode ;

-- Passage des attributs hérités.
#passAH {
local
do
  ENTITE^machine := ENTITE^machine;
	ENTITE^tvar : =ENTITE^tvar;
	ENTITE^tfun := ENTITE^tfun;
	ENTITE^talias := ENTITE^talias;
end
}

-- Transmission des TDS mise à jour après ENTITE à ENTITES1.
-- (La transmission de ENTITES à ENTITE se fait, normalement, automatiquement).
#transmissionTDS {
local
do
  ENTITES1^tvar := ENTITE^tvarS;
  ENTITES1^tfun := ENTITE^tfunS;
	ENTITES1^talias := ENTITE^taliasS;
	ENTITES1^machine := ENTITES^machine;
end
}

-- Concaténation et passage du code.
#passCode {
local
do
  ENTITES^code := ENTITE^code + ENTITES1^code;
end
}

---------------------------------------------
-------- DEFINITION D'UN NOM DE TYPE --------
--      (commence avec une majuscule)      --
---------------------------------------------

-- (4)
ENTITE -> typedef TYPE #ajout identc pv ;

-- Ajout de identc à la table des alias.
-- Vérifie que identc n'est pas déjà utilisé (par une variable, une fonction ou un autre alias).
#ajout {
local
  info : SymbolInfo;
  infoVar : VariableInfo;
	t : Type;
	ta : AliasTable;
do
  ta := ENTITE^talias;
  info := ENTITE^tvar.lookup(identc^txt, true);
  -- Si identc est une clef dans la TDSvar, erreur.
  if info != null then
     error(IDENT_TAKEN, identc^txt);
  else
     info := ENTITE^tfun.lookup(identc^txt, true);
     -- De même si identc est déjà utilisé dans la TDSfun.
    if info != null then
        error(IDENT_TAKEN, identc^txt);
     -- Sinon, on peut ajouter le nouveau type à la TDS.
    else
		  -- Vérification dans la table des alias.
			t := ta.lookup(identc^txt);
			if (t != null) then
			  error(IDENT_TAKEN, identc^txt);
      else
        ta.insert(identc^txt, TYPE^type );
			end
    end
  end  
	-- On fait remonter la nouvelle talias.
	ENTITE^taliasS := ta;
	-- Les autres tds ne sont pas modifiées.
	ENTITE^tvarS := ENTITE^tvar;
	ENTITE^tfunS := ENTITE^tfun;
	-- Pas de code pour cette RP.
	ENTITE^code := "";
end
}

---------------------------------------------------------
-- DEFINITION D'UNE VARIABLE GLOBALE OU D'UNE FONCTION --
--            (commence par une minuscule)             --
---------------------------------------------------------

-- (5)
ENTITE -> TYPE ident #idLibre DECL #majTDS #passCode; 

-- Vérification que ident n'est pas déjà utilisé dans une TDS.
-- On n'ajoute pas encore la variable / fonction à la table car on ne sait pas encore la nature.
-- On fait par contre passer les infos (ident^txt et type) à DECL pour qu'il puisse effectuer lui même l'ajout.
-- On fait aussi passer les TDS pour qu'il puisse les màj et s'en servir.
#idLibre {
local
  info : SymbolInfo;
	t : Type;
do
  info := ENTITE^tvar.lookup(ident^txt, true);
  -- Si identc est une clef dans la TDSvar, erreur.
  if info != null then
     error(IDENT_TAKEN, ident^txt);
  else
     info := ENTITE^tfun.lookup(ident^txt, true);
     -- De même si identc est déjà utilisé dans la TDSfun.
    if info != null then
        error(IDENT_TAKEN, ident^txt);
     -- Sinon, on fait passer les infos utiles à DECL.
    else
		  -- Verification dans talias.
			t := ENTITE^talias.lookup(ident^txt, true);
			if (t!= null) then
			  error(IDENT_TAKEN, ident^txt);
			else
        DECL^typeH := TYPE^type;
        DECL^nom := ident^txt;
        DECL^tvar := ENTITE^tvar;
        DECL^tfun := ENTITE^tfun;
      end
		end
  end  
end
}

-- On met à jour les TDS de ENTITE à l'aide de celles de DECL.
#majTDS {
local
do
  ENTITE^tvarS := DECL^tvarS ;
  ENTITE^tfunS := DECL^tfunS ;
	-- La talias n'est pas modifiée par cette RP.
	ENTITE^taliasS := ENTITE^talias ;
end
}

-- Passage du code généré par DECL à ENTITE.
#passCode {
local
do
  ENTITE^code := DECL^code;
end
}


-- (6) : VARIABLE
DECL -> pv #ajoutDansTDS #genCode;

-- Ajout de la variable (puisqu'on sait désormais que c'en est une) à la TDSvar (de DECL) la TDSfun reste inchangée.
-- DECL possède les attributs nécessaires à la création de la VariableInfo.
-- Les tds à jours sont mises dans des attributs spéciaux de manière à ce que la règle de prod précèdente puisse les récupérer.
#ajoutDansTDS {
local
  tv : VariableTable ;
do
  tv := DECL^tvar;
  tv.insert(DECL^nom, DECL^typeH);
  DECL^tvarS := tv;
  DECL^tfunS := DECL^tfun ; -- La TDS fun n'est pas affectée.
end
}

-- Génération du code pour la déclaration de la variable.
#genCode {
local
do
  DECL^code := DECL^machine.generateAllocateInStack(DECL^typeH);
end
}


-- FONCTION (7)
DECL -> #transmission FONCTION #majTDS #passCode;

-- L'ajout de la fonction dans la TDS nécessitant la connaissance des params, on ne peut pas le faire dans cette RP.
-- On fait passer le type retour ainsi que le nom de la fonction à FONCTION pour l'ajout.
#transmission {
local
do
  FONCTION^nom := DECL^nom;
  FONCTION^typeH := DECL^typeH;
end
}

-- "Mise à jour" des TDS de DECL.
#majTDS {
local
do
 -- La nouvelle TDSfun contient les infos concernant la nouvelle fonction.
  DECL^tfunS := FONCTION^tfunS;
 -- La TDSvar est inchangée.
  DECL^tvarS := DECL^tvar;
end
}

--Passage du code de declaration de la fonction à DECL.
#passCode {
local
do
  DECL^code := FONCTION^code;
end
}


-- (8)
FONCTION -> #creationTDSfille #creationFunctionInfo #initC paro PARFS parf #ajoutEtPassFI #creationTDSPetiteFille BLOC #declFonction ;

-- On crée la TDSvar fille pour la passer à PARFS.
#creationTDSfille {
local
do
  PARFS^tvar := new VariableTable(FONCTION^tvar);
  PARFS^tfun := FONCTION^tfun;
end
}

-- Creation de la FunctionInfo avec le type retour.
#creationFunctionInfo {
local
do
  PARFS^funInfoH := new FunctionInfo(FONCTION^typeH);
end
}

-- Initialisation du compteur de parametres.
#initC {
local 
do
  PARFS^cParam := 0;
end
}

-- Ajout de la FunctionInfo à tfun.
-- Passage de tfun à FONCTION et BLOC.
-- Passage de la FunctionInfo à BLOC.
#ajoutEtPassFI {
local
  tf : FunctionTable;
  fi : funInfo;
do
  tf := PARFS^tfun;
  fi := PARFS^funInfo;
  tf.insert(FONCTION^nom, fi);
-- Passage de tfun à FONCTION et à BLOC.
  FONCTION^tfunS := tf;
  BLOC^tfun := tf;
-- Passage de funInfo à BLOC.
  BLOC^funInfoH := fi;
end
}

-- Creation d'une TDS fille de la Tvar de PARFS et passage en tant que tvar de BLOC.
#creationTDSPetiteFille {
local
do
  BLOC^tvar := new VariableTable(PARFS^tvarS);
end
}

-- Generation du code de la declaration de la fonction.
#declFonction {
local
do
  FONCTION^code := FONCTION^machine.generateFunctionDeclaration(PARFS^funInfo , BLOC^code);
end
}

-------------------------------------------
-------- PARAMETRES DE FONCTION -----------
-------------------------------------------

-- (9)
PARFS ->  #passageFunInfo #transTvar ;

#passageFunInfo {
local
do
  PARFS^funInfo := PARFS^funInfoH ;
end
}

-- Passage de tvar, de manière à ce que l'attribut tvarS de PARFS soit initialisé.
#transTvar {
local
do
  PARFS^tvarS := PARFS^tvar;
end
}


-- (10)
PARFS -> #increC PARF #TODOpassTvar #ajoutType PARFSX #majTvarSynt #transFI ;
-- (Normalement le passage des TDS de PARFS à PARF puis de PARF à PARFSX se fait automatiquement).

-- Incrementation du compteur de parametres, et passage de l'attribut.
#incrC {
local
  c : int;
do
  c := PARFS^cParam + 1;
  PARF^cParam := c;
  PARFSX^cParam := c;
end
}

-- Création de lTypes de PARFS à partir de la liste des types de PARFSX et du type de PARF.
#ajoutType {
local
  fi : functionInfo ; 
do
  fi := PARFS^funInfoH ;
  -- On ajoute le type de PARF à la variable FunctionInfo.
  fi.add(PARF^type);
  PARFSX^funInfoH := fi;
end
}

-- On crée une TDSvar synthétisée à partir de la liste des paramètres qu'on passe à PARFS.
-- Ce sera la TDS du corps de la fonction.
#majTvarSynt {
local
do
  PARFS^tvarS := PARFSX^tvarS;
end
}

-- Transmission de FunctionInfo.
#transFI {
local
do
  PARFS^funInfo := PARFSX^funInfo ;
end
}


-- (11)
PARFSX ->  #passageFunInfo ;

-- Passage de FunctionInfo (transformation d'attribut hérité en attribut synthétisé).
#passageFunInfo {
local
do
  PARFSX^funInfo := PARFSX^funInfoH ;
end
}

 
-- (12)
PARFSX -> #incrC virg PARF #majFI PARFSX #transFI ;

-- Incrementation du compteur de parametres, et passage de l'attribut.
#incrC {
local
  c : int;
do
  c := PARFSX^cParam + 1;
  PARF^cParam := c;
  PARFSX1^cParam := c;
end
}

-- Ajout du paramètre de PARF au functionInfo et passage à PARFSX1.
-- Passage de la tvar locale.
#majFI {
local
  fi : functionInfo;
do
  fi := PARFSX^funInfoH;
  fi.add(PARF^type);
  PARFSX1^funInfoH := fi;
	PARFSX1^tvar := PARF^tvarS;
end
}

-- Transmission de FunctionInfo.
#transFI {
local
do
  PARFSX^funInfo := PARFSX1^funInfo ;
end
}


-- (13)
PARF ->  TYPE #ajouts ident ;

-- Ajout de ident à la TDS locale.
-- Vérifications concernant ident.
-- Passage du type.
#ajouts {
local
  tv : VariableTable;
	t : Type;
do
  tv := PARF^tvar;
  -- Vérifications concernant ident.
  info := tv.lookup(ident^txt, false);
  -- Si identc est une clef dans la TDSvar, erreur.
  if info != null then
    error(IDENT_TAKEN, ident^txt);
  else
    info := PARF^tfun.lookup(ident^txt, false);
    -- De même si identc est déjà utilisé dans la TDSfun.
    if info != null then
      error(IDENT_TAKEN, ident^txt);
    else
		  t := PARF^talias.lookup(ident^txt, false);
			-- De même dans talias.
			if (t != null) then
			  error(IDENT_TAKEN, ident^txt);
			else
			  -- Ajout de ident à la TDS locale.
        tv.insert(ident^txt, new VariableInfo(TYPE^type, PARF^funInfo.displacement(PARF^cParam)));
      end
		end
  end
	PARF^tvarS := tv;
  PARF^type := TYPE^type;
end
}


----------------------------------------------------------------
-------- LES TYPES (de base, noms, struct et pointeurs) --------
----------------------------------------------------------------

-- (14)
TYPE -> STYPE #passage PTRS #recupType;

-- Passage du type de STYPE à PTRS pour qu'il "pointeurise" la chose.
#passage {
local
do
  PTRS^typeH := STYPE^type;
end
}

-- Recuperation du type final de l'expression.
#recupType {
local
do
  TYPE^type := PTRS^type;
end
}


-- Des * pour definir un pointeur (15)
PTRS -> #passage ;

-- Passage de l'attribut hérité à celui synthétisé. 
#passage {
local
do
  PTRS^type := PTRS^typeH;
end
}


-- (16)
PTRS -> mult #point PTRS #passage ;

-- Passage du type une foix la couche de pointeur ajoutée.
#point {
local
do
  PTRS1^typeH := new PointerType(PTRS^typeH);
end
}

-- Probablement inutile : passage de l'attribut type synthétisé.
#passage {
local
do
  PTRS^type := PTRS1^type;
end
}


-- Types de base (17)
STYPE-> void #typage ;

#typage {
local
do
  STYPE^type := new VoidType();
end
}


-- (18)
STYPE-> int #typage ;

#typage {
local
do
  STYPE^type  := new IntegerType();
end
}


-- (19)
STYPE-> char #typage ;

#typage {
local
do
  STYPE^type  := new CharacterType();
end
}

-- Nom de type (commence par une majuscule) (20)
STYPE -> identc #testType;

#testType {
local
  typeRech : Type;
do
  typeRech := STYPE^talias.lookup(identc^txt);
  -- Si identc n'est pas une clef dans la TDSvar, erreur.
  if typeRech = null then
     error(IDENT_UNDEFINED, identc^txt);
  else
     STYPE^type :=  typeRech;
  end
end
}


------------------------
------ STRUCTURES ------
------------------------

-- (21)
STYPE -> struct aco #ch CHAMPS acf  #type ;

-- Création de la liste de champs qui servira à construire le type.
#ch {
local
do
  CHAMPS^champs := new StructFields();
end
}

-- On récupère la liste des champs, synthétisée par CHAMPS,
-- pour créer le type.
#type {
do
  STYPE^type := new StructType(CHAMPS^champsS);
end
}


-- (22)
CHAMPS -> #pass ;

-- Passage de l'attribut hérité à celui synthétisé.
#pass {
local
do
  CHAMPS^champsS := CHAMPS^champs;
end
}


-- Un nom de champ commence par une minuscule (23)
CHAMPS -> CHAMP #ch CHAMPS #passChamps ;
#ch {
local
  c : StructFields
do
  c := CHAMPS^champs;
  if c.exist(CHAMP^nom) then
	  -- si un champ porte déjà ce nom : erreur.
    error(IDENT_TAKEN, CHAMP^nom);
  else
	  -- Sinon, on ajoute le champ au StructFields.
    c.insert(CHAMP^nom,CHAMP^type);
   end
	 -- On passe le StructFields à CHAMPS1.
	 CHAMPS1^champs := c;
end
}

-- Passage du StructFields.
#passChamps {
local
do
  CHAMPS^champsS := CHAMPS1^champsS;
end
}


-- (24) 
CHAMP -> TYPE #pass ident pv;

-- Passage des attributs qui serviront à créer le champ.
#pass {
  local
  do
    CHAMP^nom = ident^txt;
    CHAMP^type = TYPE^type;
  end
}


----------------------------------------------------------------
----------- CORPS DE FONCTION ET BLOC D'INSTRUCTIONS -----------
----------------------------------------------------------------

-- (25)
BLOC ->  aco #passage INSTS acf  #flushPassCode ;

-- Probablement inutile, mais passage des TDS de BLOC à INSTS.
-- Ainsi que la FunctionInfo de la fonction.
#passage {
local
do
  INSTS^tvar := BLOC^tvar;
  INSTS^tfun := BLOC^tfun;
  INSTS^funInfoH := BLOC^funInfoH;
end
}

-- Generation du flush de fin de bloc.
-- Passage du code généré par les INSTS (et le flush) à BLOC.
#flushPassCode {
local
  code : String;
do
  code := INSTS^code;
  code := code + BLOC^machine.generateFlush(BLOC^tvar);
  BLOC^code := code;
end
}



-- Instructions
-- (26) : Fin des instructions du bloc.
INSTS -> #initCode ;

-- Initialisation de l'attribut code (chaine vide).
#initCode {
local
do
  INSTS^code := "";
end
}


-- (27)
INSTS -> #funInfo INST #passage INSTS #passCode ;

-- Passage du type retour de la fonction.
#funInfo {
local
do
  INST^funInfoH := INSTS^funInfoH;
	INSTS1^funInfoH := INSTS^funInfoH;
end
}

-- Passage des TDS de INST à INSTS1.
#passage {
local
do
  INSTS1^tvar := INST^tvarS;
  INSTS1^tfun := INST^tfun;  -- La table des fonctions ne changera pas.
end
}

-- Concaténation des codes et passage à INSTS.
#passCode {
local
do
  INSTS^code := INST^code + INSTS1^code;
end
}


-- (28) : Declaration de variable locale avec ou sans init 
INST ->  TYPE ident #ajoutTDS AFFX pv #genCode;

-- Vérifiation que l'identifiant n'est pas déjà use localement.
-- Ajout à la Tvar.
#ajoutTDS {
local
  info : SymbolInfo;
	tv : VariableTable;
do
  info := INST^tvar.lookup(ident^txt, true);
  -- Si ident est une clef dans la TDSvar, erreur.
  if info != null then
     error(IDENT_TAKEN, ident^txt);
  else
    info := ENTITE^tfun.lookup(ident^txt, false);
    -- De même si identc est déjà utilisé dans la TDSfun.
    if (info != null) then
      error(IDENT_TAKEN, ident^txt);
		-- Sinon, on ajoute cet id à la tdsvar.
		else
		  tv := INST^tvar;
	   	tv.insert(ident^txt, TYPE^type);
      INST^tvarS := tv;
    end
  end 
end
}

-- Génération du code
-- On vérifie si on a TYPE ident := X; ou TYPE ident;
#genCode {
local
  reg : Register;
	varinf : VariableInfo;
do
	if (AFFX^estVar) then
		-- Pas d'affectation a droite, juste une decl locale
    INST^code := INST^machine.generateAllocateInStack(TYPE^type); 
	else
		-- On a une affectation (au moins)
		varinf := INST^tvar.lookup(ident^txt, false);		 
    INST^code := INST^machine.generateAllocateInStack(TYPE^type) +INST^machine.generateStoreValue(varinf,AFFX^reg);
  end
end
}

-- TODO : Passage tvar.
-- (29) : Instruction expression (affectation et appel de procedure)
INST -> E pv ;



-- (30) : Bloc d'instructions
INST ->  #tdsFille #passFI BLOC #passTvar #passCode;

-- Création d'une tvar fille héritant de celle de INST pour BLOC.
#tdsFille {
local
  tfille : VariableTable;
do
  tfille := new VariableTable(INST^tvar);
  BLOC^tvar := tfille;
end
}

-- Passage de la FunctionInfo.
#passFI {
local
do
  BLOC^funInfoH := INST^funInfoH;
end
}

-- La tvar de INST n'est pas modifiée par BLOC.
#passTvar {
local
do
  INST^tvarS := INST^tvar;
end
}

-- Passage du code de BLOC à INST.
#passCode {
local
do
  INST^code := BLOC^code;
end
}

-- TODO : Code de la condition et branchs.
-- (31) : Conditionnelle
INST -> si paro E parf #passFI #tdsFille BLOC #transTDS SIX #passAttributs #passCode;

-- Passage de FunctionInfo.
#passFI {
local
do
  BLOC^funInfoH := INST^funInfoH;
	SIX^funInfoH := INST^funInfoH;
end
}

-- Création d'une tvar fille héritant de celle de INST pour BLOC.
#tdsFille {
local
  tfille : VariableTable;
do
  tfille := new VariableTable(INST^tvar);
  BLOC^tvar := tfille;
  -- Useless?
  BLOC^tfun := INST^tfun;
end
}

-- Useless?
-- Transmission des TDS 'parentes' à SIX.
#transTDS {
local
do
  SIX^tvar := INST^tvar;
  SIX^tfun := INST^tfun;
end
}

-- Passage de la TDSvar en attribut synthétisé.
#passAttributs {
local
do
  INST^tvarS := INST^tvar;
end
}

-- Concaténation et passage du code.
#passCode {
local
do
  INST^code := BLOC^code + SIX^code;
end
}


-- (32)
SIX -> sinon #passFI #tdsFille BLOC #passCode;

-- Passage de FunctionInfo
#passFI {
local
do
  BLOC^funInfoH := SIX^funInfoH;
end
}

-- Création d'une tvar fille héritant de celle de INST pour BLOC.
-- Passage du type retour de la fonction.
#tdsFille {
local
  tfille : VariableTable;
do
  tfille := new VariableTable(SIX^tvar);
  BLOC^tvar := tfille;
  -- Useless?
  BLOC^tfun := SIX^tfun;
end
}

-- Passage du code du BLOC à SIX.
#passCode{
local
do
  SIX^code := BLOC^code;
end
}


-- (33)
SIX -> #codeVide ;
-- Rien à faire pour la gestion des TDS.
-- Génération d'une chaine de caractère vide.
#codeVide {
local
do
  SIX^code := "";
end
}



-- (34) : Retour de fonction.
INST ->  retour E pv #verifTypage #genCode ;

-- Vérification que E est du type retour de la fonction.
#verifTypage {
local
  typeRet : Type;
do
  typeRet := INST^funInfoH.returnType();
  -- Si typeRet ne correspond pas à E^type
  -- alors erreur.
  if not typeRet.isEqual(E^type) then
    error(TYPE_NOT_COMPATIBLE, typeRet.name(), E^type.name());  
  end
end
}

--Génération du code de retour de la fonction et du flush.
#genCode {
local
  code : String;
do
  code :=   INST^machine.generateFlush(INST^tvar)
	        + INST^machine.generateFunctionReturn(INST^funInfoH, E^reg);
	INST^code := code;
end
}


-----------------------------------------------------------------------
--------------------------- LES EXPRESSIONS ---------------------------
-----------------------------------------------------------------------
-- E = expression (y compris l'affectation)
-- A = expression figurant dans une affectation
-- R = expression figurant dans une expresion relationnelle
-- T = expression figurant dans une expression additive (TERME)
-- F = expression figurant dans une expression multiplicative (FACTEUR)
-----------------------------------------------------------------------

-- (35)
E -> #needVi A #affPossible AFFX #estVarEtVi ;

-- Maj d'un attribut pour AFFX signalant si A est, ou non, une variable.
-- Maj de l'attribut typeH de AFFX afin de tester que les types correspondent.
#affPossible {
local
do
  AFFX^affPossible := A^estVar;
  AFFX^typeH := A^type;
end
}

-- Attribut estVar de E : E représente une variable si
-- AFFX est vide ce qui sera représenté par son attribut estVar
-- et si E est une variable.
-- Si l'expression représente une variable, on met la vi correspondant dans l'attribut vi.
#estVarEtVi {
local
do
  if (A^estVar) && (AFFX^estVar) then
	  E^estVar := true ;
		E^vi := A^vi ;
  else 
	  E^estVar := false ;
		E^vi := null ;
	end
end
}


-- (36) : Affectation
AFFX -> affect A #affValide #estVar ;

-- Vérifie que l'affectation est valide :
--   - la partie à gauche du = doit être une variable,
--   - le type de A doit être compatible avec celui de AFFX.
#affValide {
local
do
  if !(AFFX^affPossible) then
    error(LEFT_PART_NOT_VARIABLE ); --, AFFX^txt);	
  else
    if (A^type.isCompatible(AFFX^type)) then
     error(TYPE_NOT_COMPATIBLE); --, AFFX^typeH.name(), A^type.name());     
		end
	end
end
}

-- On met l'attribut estVar de AFFX à faux car la règle 
-- appelante ne pourra pas être une variable suit à cette RP.
#estVar {
local
do
  AFFX^estVar := false;
end
}


-- (37)
AFFX -> #estVar ;

-- On met estVar à true car cette RP n'empeche pas la representation d'une var.
#estVar {
local
do
  AFFX^estVar := true ;
end
}


-- (38) : Relation
A -> R AX #oper #estVarEtVi ;

#oper {
local
do
  if AX^estVar then
	  A^code := R^code;	
	else 
		A^code := AX^code + R^code + A^machine.generateOperation(AX^op,R^reg,AX^reg,A^reg);
	end
end
}

-- A représente une variable si AX ne l'empêche pas 
-- et R représente une variable, on fait alors passer
-- la vi de R à A. Sinon, vi est à null pour R.
#estVarEtVi {
local
do
  if (R^estVar)&&(AX^estVar) then 
    A^estVar := true;
    A^vi := R^vi;
	else
	  A^estVar := false;
    A^vi := null;
	end
end
}


-- (39)
AX -> OPREL R #actuOp #estVarEtVi;

#actuOp {
local
do
  AX^oprel = OPREL^oprel;
end
}

-- La RP appelante ne represente pas une variable.
#estVarEtVi {
local
do
  AX^estVar := false;
end
}


-- (40)
AX -> #oprel #estVarEtVi ;

-- L'oprel de AX est null dans ce cas.
-- Il faut tout de même l'initialiser comme il s'agit d'un attribut synthétisé.
#oprel {
local
do
  AX^oprel := null;
end
}

-- La RP n'empeche pas d'etre une variable.
#estVar {
local
do
  AX^estVar := true;
end
}

-- (41) Operateurs relationnels
OPREL -> #opr inf ;

#opr {
local
do
  OPREL^oprel := LT;
end
}


-- (42)
OPREL -> #opr sup ;

#opr {
local
do
  OPREL^oprel := GT;
end
}


-- (43)
OPREL -> #opr infeg ;

#opr {
local
do
  OPREL^oprel := LEQ;
end
}


-- (44)
OPREL -> #opr supeg ;

#opr {
local
do
  OPREL^oprel := GEQ;
end
}


-- (45)
OPREL -> #opr eg ;

#opr {
local
do
  OPREL^oprel := EQ;
end
}


-- (46)
OPREL -> #opr neg ;

#opr {
local
do
  OPREL^oprel := NEQ;
end
}


-- (47)
R -> T RX #oper #estVarEtVi ;

#oper {
local
do
  if (RX^op != NOP) then
	  R^code := RX^code + T^code + RX^machine.generateOperation(RX^op,T^reg,RX^reg,R^reg);
	end

end
}

-- R est variable si T l'est et RX ne l'empeche pas,
-- dans ce cas, on lui donne la vi de R. Dans le cas
-- contraire, l'attribut vi de R est à null.
#estVarEtVi {
local
do
  if ((T^estVar)&&(RX^estVar)) then
	  R^estVar := true;
		R^vi := T^vi;
	else
	  R^estVar := false;
		R^vi := null;
	end
end
}

-- (48) : Additions ...
RX -> OPADD T RX #actuOp #estVar ;

#actuOp {
local
do
  if (RX1^op != NOP) then
	  RX^code := RX1^code + T^code + RX1^machine.generateOperation(RX1^op,T^reg,RX1^reg,RX^reg);
	else 
	  RX^code := RX1^code + T^code;
	end
	RX^op = OPADD^op;
end
}

-- Si cette RP apparait dans l'expression, alors il ne s'agit pas d'une variable.
#estVar {
local
do
  RX^estVar := false;
end
}


-- (49)
RX -> #nop #estVar;

#nop {
local
do
  RX^op := NOP;
end
}

-- N'empeche pas la représentation d'une variable.
#estVar {
local
do
  RX^estVar := true;
end
}


-- (50) : Operateurs additifs
OPADD -> #op plus ;

#op {
local
do
  OPADD^op := ADD;
end
}


-- (51)
OPADD -> #op moins ;

#op {
local
do
  OPADD^op := SUB;
end
}


-- (52)
OPADD -> #op ou ;

#op {
local
do
  OPADD^op := OR;
end
}


-- (53) : Multiplication, ...
T ->  F  TX #oper #estVarEtVi ;

#oper {
local
do
  if (TX^op != NOP) then
	  T^code := TX^code + F^code + TX^machine.generateOperation(TX^op,F^reg,TX^reg,T^reg);
	else 
	  T^code := TX^code + F^code;
	end

end
}

-- T est une variable si F l'est et TX ne l'empeche pas.
-- Dans ce cas, vi de T est celui de F.
-- Sinon, vi est à null.
#estVarEtVi {
local
do
  if ((F^estVar)&&(TX^estVar)) then
	  T^estVar := true;
		T^vi := F^vi;
  else
	  T^estVar := false;
		T^vi := null;
	end
end
}


-- (54)
TX -> OPMUL F TX #actuOp #estVar;

#actuOp {
local
do
  if (TX1^op != NOP) then
	  TX^code := TX1^code + F^code + TX1^machine.generateOperation(TX1^op,F^reg,TX1^reg,TX^reg);
	else 
	  TX^code := TX1^code + F^code;
	end
	TX^op = OPMUL^op;
end
}

--Cette RP empeche l'expression d'etre une variable.
#estVar {
local
do
  TX^estVar := false;
end
}


-- (55)
TX -> #nop #estVar ;

#nop {
local
do
  TX^op := NOP;
end
}

-- N'empeche pas l'espression de rpz une var.
#estVar {
local
do
  TX^estVar := true;
end
}


-- (56) : Operateurs multiplicatifs
OPMUL -> #op mult ;
#op {
local
do
  OPMUL^op := MUL;
end
}


-- (57)
OPMUL -> #op div ;

#op {
local
do
  OPMUL^op := DIV;
end
}


-- (58)
OPMUL -> #op mod ;

#op {
local
do
  OPMUL^op := MOD;
end
}


-- (59)
OPMUL -> #op et ;

#op {
local
do
  OPMUL^op := AND;
end
}


---------------------------------------
--------- Expressions de base ---------
---------------------------------------

-- (60) : Constante entiere
F -> entier #typeEtGenCode #estVarEtVi ;

-- Set de l'attribut de type de F pour indiquer qu'il s'agit d'un entier.
-- Génération du code pour load la valeur de l'entier dans la mémoire.
#typeEtGenCode {
local
  t : IntegerType;
  r : Registre;
	n : int;
do
  -- Creation du type et du registre.
  t := new IntegerType();
  r := new Registre();
	-- Récup de l'entier et conversion au bon format.
	n := Integer.parseInt(entier^txt);
	-- Set de l'attribut type.
	F^type := t;
	-- Génération du code, et set de l'attribut le contenant.
  F^code := F^machine.generateLoadConstant(new ConstantInfo(t, n), r); 
	-- Set de l'attribut registre de F, c'est le registre contenant l'entier.
	F^reg := r;
end
}

-- Une expression de base ne peut representer une variable.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
	F^vi := null;
end
}


-- (61) : Constante chaine
F -> chaine #typeEtGenCode #estVarEtVi ;

-- Set de l'attribut type et reg de F.
-- Génération de code pour load la chaine.
#typeEtGenCode {
local
  l : int;
  t : StringType;
	r : Register;
	s : String;
do
  -- Récup de la chaine.
  s := chaine^txt;
  l := s.length();
	-- Suppression des " au début et à la fin de celle-ci.
	s := s.substring(1,l-1);
	l := l-2;
	-- Initialisation du type, en précisant la taille.
	t := new StringType(l);
  -- Création du registre.
	r := new Registre();
	-- Génération du code et set des attributs de F.
	F^code := F^machine.generateLoadConstant(ConstantInfo.fromString(s), r);
	F^reg =: r;
	F^type := t;

end
}

-- Une expression de base ne peut representer une variable.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
  F^vi := null;
end
}


-- (62) : Constante caractere
F -> caractere #typeEtGenCode #estVarEtVi ;

-- Set de l'attribut type et reg de F.
-- Génération de code pour load le caractere.
#typeEtGenCode {
local
  c : CharacterType;
	r : Register;
	s : String;
do
  -- Récup du caractère.
	c := caractere^txt.charAt(1);
	-- Init du type et du reg.
	t := new CharacterType();
	reg := new Register();
	-- Gen du code et set des attributs de F.
	F^code := F^machine.generateLoadConstant(new ConstantInfo(t, c), r);
	F^reg := r;
	F^type := t;
end
}

-- Une expression de base ne peut representer une variable.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
  F^vi := null;
end
}


-- (63) : Expression unaire
F ->  OPUN  F  #genCode #estVarEtVi;

-- Génération du code pour la déclaration de la variable.
#genCode {
local
do
	F^code:= F1^code + F^machine.generateOperation(OPUN^op,F1^reg,F^reg);
end
}

-- Une variable ne peut contenir d'opérateur unaire.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
  F^vi := null;
end
}


-- (64) : Operateurs unaires
OPUN -> plus ;

#op {
local
do
  OPUN^op := PLS;
end
}


-- (65)
OPUN -> moins ;

#op {
local
do
  OPUN^op := NEG;
end
}


-- (66)
OPUN -> non;

#op {
local
do
  OPUN^op := NOT;
end
}


-- (67) : Pointeur NULL
F -> null #estVarEtVi;

-- Le pointeur null ne représente pas une variable.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
  F^vi := null;
end
}

-- (68) : Expression parenthesee
-- TODO.
F ->  paro E parf FX #estVarEtVi;

-- F est une variable si E l'est et FX ne l'empeche pas.
-- Dans ce cas, vi de F prend celui de E. Dans le cas
-- contraire, il est null.
#estVarEtVi {
local
do
  if ((E^estVar)&&(FX^estVar)) then
	  F^estVar := true;
		F^vi := E^vi;
	else
	  F^estVar := false;
		F^vi := null;
	end
end
}


-- (69) : Cast
F ->  paro TYPE parf #cast F #estVarEtVi;

-- (int)a ne représente pas une variable : 
-- le cast empeche une expression d'etre une variable.
-- Donc pas de vi.
#estVarEtVi {
local
do
  F^estVar := false;
	F^vi := null;
end
}

#cast {
local
do
  if F1^type.isCompatible(TYPE^type) then
	   F^type := TYPE^type;
		 F^vi := new VariableInfo(TYPE^type,F1^vi.disp());
  else
	   -- Pas de méthode name() dans Type pour l'instant.
     error(TYPE_NOT_COMPATIBLE, F1^type.name(), TYPE^type.name());	   
  end
end
}

-- (70) : Dereferencement.
-- TODO : F^type.
F -> mult F #estVarEtVi;

-- F représente une variable si F1 en représente une, et que celle-ci est un pointeur.
#estVar {
local
do
          
end
}

-- LA REGLE OU C'EST REPARTI EN VRILLE. --
-- TODO : code sur F et FX.
-- (71)
F -> ident #rechercheTables FX #estVar #genCodeEtReg ; 

global
  varInfo : VariableInfo;
  funInfo : FunctionInfo;
	estFun : boolean;

-- On cherche ident dans les TDS.
-- Instenciation des attributs nécessaires.
#rechercheTables {
local
  listeDepl : DisplacementList ;
	type : Type;
  info : SymbolInfo; 
do
  
  --Initialisations.
  listeDepl := new DisplacementList();
	estFun := false;
	type := null;
	varInfo := null;
	funInfo := null;

	-- Recherche dans la TVar.
  info := F^tvar.lookup(ident^txt);
  if (info = null) then
	  -- ident n'est pas dans la TVar, F n'est pas une variable.
		-- On regarde dans la TFun s'il s'agit de l'identifiant d'une fonction.
		info := F^tfun(lookup(ident^txt);
    if (info = null) then
		  -- On n'a pas trouvé le symbole dans les TDS : erreur.
			error(IDENT_UNDEFINED, ident^txt);
    else
		  -- L'id est celui d'une fonction.
			-- On passe estFun à vrai.
			listeDepl.add(0, false);
			estFun := true;
			funInfo := (FunctionInfo)info;
			type := funInfo.returnType();
    end
  else
		-- On peut passer le type.
		varInfo := (VariableInfo)info;
		type := varInfo.type();
		-- On rajoute toujours le déplacement de a à la liste.
		-- Le test pour savoir si a est bien un struct se fait dans les RP ,de FX.
		listeDepl.add(varInfo.displacement, false);
  end
	-- On passe les attributs qui serviront à FX.
	FX^listeDepl := listeDepl;
	FX^estFun := estFun;
	FX^typeH := type;
	FX^funInfoH := funInfo;
end
}

-- F est une variable si l'identifiant n'était pas celui d'une fonction : NOP.
-- On peut considérer un appel de fonction comme une variable.
#estVar {
local
do
  F^estVar := true;
	-- F^estVar := !(estFun);
end
}

-- Le type de F est celui de FX.
#type {
local
do
  F^type := FX^type;
end
}

-- Génération du code.
-- Traitements différents selon qu'on ait : - éffectué un appel de fonction.
--																					- accédé simplement à une variable.
--               														- accédé à un champ de struct.
#genCodeEtReg {
local
  listeDepl : DisplacementList; 
  reg : Registre;
	code : String;
	vi : VariableInfo;
do
  listeDepl := FX^listeDeplS;
	vi := null;
  reg := new Registre();
	if estFun then
    -- On a un appel de fonction, peut être suivi d'accés à des champs de struct.
	  -- regRetourFun est le registre contenant le résultat de l'appel de fonction,
		-- il se trouve dans le FunctionInfo \o/.
    code := F^machine.generateMakeAddress(funInfo., listeDepl, reg);
	else 
	  -- On n'a pas d'appel de fonction. 
		if (listeDepl.size() > 1) then
	    -- Des déplacements ont été ajoutés à la liste en plus de celui de ident : on a accédé à des champs de struct !
		  -- Le registre contient l'adresse de la variable accédée par FX dans le struct.
      code := F^machine.generateMakeAddress(listeDepl.register(), reg);
		else
      -- Accés direct à une variable.
      -- On ne génére pas de code directement ici, par contre on fait remonter la vi.
			-- La VariableInfo est déjà dans varInfo.
      code := "";
			vi := varInfo;
		end
  end
	F^vi := vi;
	F^code := FX^code + code;
end
}


-- (72)
FX -> #verifFonction #typeEtDepl ;

-- Vérifie qu'on n'attendait pas une liste d'argument pour un appel de fonction.
#verifFonction {
local
do
  if FX^estFun then
	  error(FUNCTION_CALL_WITHOUT_PARS);
	end
end
}

-- On fait remonter le type.
-- Et la liste de déplacements.
-- Et une chaine vide comme code.
#typeEtDepl {
local
do
  FX^code := "";
  FX^type := FX^typeH;
  FX^listeDeplS := FX^listeDepl;
end
}

-- (73) : Acces champ
FX -> pt ident #rechChamp FX #typeEtPileDepl;

-- Recherche du champ. 
#rechChamp {
local
  typeStruct : StructType; 
	type : Type;
	listeDepl : DisplacementList;
do
  listeDepl := FX^listeDepl;
	type := FX^typeH;
  -- On vérifie que ce qui est à gauche de cet appel est bien un struct.
  match type
	with StructType then  
		-- On vérifie que le champ existe et on y accède.
    typeStruct := (StructType)type;
		if (typeStruct.fields().instanceOf(ident^txt) = -1) then
		  -- Si le instanceOf renvoie -1, c'est que l'identifiant n'apparait pas dans les champs : erreur.
		  error(CHAMP_INEXISTANT, ident^txt);
		else
      -- Si le champ existe, on ajoute le déplacement correspondant à la liste.
			listeDepl.add(typeStruct.fieldDisplacement(ident^txt),false);
			-- On récupère le type.
   		type := typeStruct.find(ident^txt);
	  end
	else
		-- Sinon : erreur !
	  error(NOT_STRUCT);
  end
	FX1^listeDepl := listeDepl;
	FX1^estFun := false;
	FX1^typeH := type;
	FX1^funInfoH := null;
end
}

-- On fait remonter le code, le type et la liste de deplacement.
#typeEtPileDepl{
local
do
  FX^code := FX1^code;
  FX^type := FX1^type;
	FX^listeDeplS := FX1^listeDeplS;
end
}


-- (74) : Acces champ pointeur
FX -> arrow ident #rechChamp FX #typeEtPileDepl;

-- Comme dans la RP precedent, on doit vérifier que la règle est applicable.
-- Le type passé à FX doit etre celui d'un pointeur et le type pointé un struct.
-- La champ doit exister dans le type pointé.
#rechChamp {
local
  type : Type;
	typeP : PointerType;
	typeS : StructType;
	listeDepl : DisplacementList;
do
  type := FX^typeH;
	listeDepl := FX^listeDepl;
	match type
	with PointerType then
	-- Si type est un pointeur on va vérifier qu'il s'agit d'un pointeur sur struct.
    typeP := (PointerType)type;
		type := typeP.getType();
		-- Si le type pointé est struct, on va vérifier que le champ existe.
    match type
		with StructType
		  typeS := (StructType)type;
      if (typeS.fields().instanceOf(ident^txt) = -1) then
		    -- Si le instanceOf renvoie -1, c'est que l'identifiant n'apparait pas dans les champs : erreur.
		    error(CHAMP_INEXISTANT, ident^txt);
		  else
        -- Si le champ existe, on ajoute le déplacement correspondant à la liste.
		  	listeDepl.add(typeS.fieldDisplacement(ident^txt),true);
		  	-- On récupère le type.
   	  	type := typeS.find(ident^txt);
	    end
		-- Sinon : erreur !
		else
      error(NOT_STRUCT);
		end
	else
	-- Sinon : erreur !
	  error(NOT_A_POINTEUR);
  end
	FX1^estFun := false;
	FX1^typeH := type;
	FX1^listeDepl := listeDepl;
	FX1^funInfoH := null;
end
}

-- On fait remonter le code, le type et la liste de deplacement.
#typeEtPileDepl{
local
do
  FX^code := FX1^code;
  FX^type := FX1^type;
	FX^listeDeplS := FX1^listeDeplS;
end
}


-- (75) : Appel de sous-programme
-- La verification des paramètres ainsi que la generation des pushs
-- se font dans ES.
FX -> #estFun #passParams paro ES parf #attributs FX #genCode #attributs2;
global
  codeAppel : String
-- Verification que l'appelant est une fonction.
#estFun {
local
do
  if !(FX^estFun) then
	  error(NOT_A_FUN);
	end
end
}

-- Passage du type des paramètres de la fonction à ES.
-- Init du code des pops.
#passParams {
local
  fi : FunctionInfo;
do
  fi := FX^funInfoH;
  ES^typesAttendus := fi.parameters();
  ES^codeH := "";
end
}

-- Instenciation des arguments hérités de FX.
#attributs {
local
do
  -- La liste des deplacements n'a pas été modifié par le parcours des arguments.
  FX1^listeDepl := FX^listeDepl;
	-- L'appel de fonction n'est pas une fonction.
	FX1^estFun := false; 
	-- Le type de l'appel est le type de retour de la fonction.
	FX1^typeH := FX^typeH;
	-- Pas une fonction : pas de FunctionInfo.
	FX1^funInfoH := null;
end
}

-- On push les arguments, le code est dans ES^code.
-- Puis on appel la fonction.
-- Et on met le code de FX1.
#genCode {
local
do
  FX^code := ES^code + generateFunctionCall(FX^funInfoH) + FX1^code; 
end
}

-- On fait remonter les attributs hérités.
#attributs2 {
local
do
  FX^type := FX1^type;
	FX^listeDeplS := FX1^listeDeplS;
end
}


-- (76) : Arguments appel de sous-programme
ES -> #verifParams #genCode ;

-- Verification que la liste des parametres attendus est bien vide.
#verifParams {
local
  l : List<Type>;
do
  l := ES^typesAttendus;
	if !(l.isEmpty() then
	  error(NO_ENOUGH_PARAMS);
	end
end
}

-- On n'a rien à ajouter comme code à cette RP.
-- On fait remonter le code des paramètres précédents.
#genCode {
local
do
  ES^code := ES^codeH;
end
}


-- (77)
ES -> E #typesEtPassListe ESX #genCode ;

-- On vérifie que E est bien du type attendu pour ce paramètre.
-- Egalité stricte entre les types, on pourrait améliorer en utilisant isEqual.
-- Et on fait passer le reste de la liste des paramètres.
#typesEtPassListe {
local
  l : List<Types>;
  t : Type;
	code : String;
do
  l := ES^typesAttendus;
	-- On vérifie que la liste n'est pas vide.
	if (l.isEqual()) then
	  error(TOO_MANY_ARGS);
	else
    -- On recupère le premier element de listeAttendus.
    t := l.get(0);
	  code := ES^code;
	  if !(t.isEqual(E^type) then
	    error(WRONG_TYPE_FOR_THIS_PARAMETER);
  	else
  	 	l := l.remove(0);
  		-- On génère le code pour push l'argument grace au registre de E.
  		-- On l'ajoute à la suite du code de E lui même à la suite 
  		-- du code des arguments précédents. 
      code := code + E^code + ES^machine.generateFunctionPushArgument(E^reg);
	  end
	end
  ESX^typesAttendus := l;
  ESX^codeH := code;
end
}

-- Passage du code de ESX à ES.
#gencode {
local
do
  ES^code := ESX^code;
end
}


-- (78)
ESX -> #verifParams #genCode ;

-- Verification que la liste des parametres attendus est bien vide.
#verifParams {
local
  l : List<Types>;
do
  l := ESX^typesAttendus;
	if !(l.isEmpty() then
	  error(NO_ENOUGH_PARAMS);
	end
end
}

-- On n'a rien à ajouter comme code à cette RP.
-- On fait remonter le code des paramètres précédents.
#genCode {
local
do
  ESX^code := ESX^codeH;
end
}


-- (79)
ESX -> virg E #typesEtPassListe ESX #genCode ;

-- On vérifie que E est bien du type attendu pour ce paramètre.
-- Egalité stricte entre les types, on pourrait améliorer en utilisant isEqual.
-- Et on fait passer le reste de la liste des paramètres.
#typesEtPassListe {
local
  l : List<Types>;
  t : Type;
	code : String;
do
  l := ESX^typesAttendus;
	-- On vérifie que la liste n'est pas vide.
	if (l.isEmpty()) then
	  error(TOO_MANY_ARGS);
  else
    -- On recupère le premier element de listeAttendus.
    t := l.get(0);
	  code := ESX^code;
  	if !(t.isEqual(E^type) then
	    error(WRONG_TYPE_FOR_THIS_PARAMETER);
	  else
	   	l := l.remove(0);
		  -- On génère le code pour push l'argument grace au registre de E.
		  -- On l'ajoute à la suite du code de E lui même à la suite 
		  -- du code des arguments précédents. 
      code := code + E^code + ESX^machine.generateFunctionPushArgument(E^reg);
	  end
	end
  ESX1^typesAttendus := l;
  ESX1^codeH := code;
end
}

-- Passage du code de ESX à ES.
#gencode {
local
do
  ESX^code := ESX1^code;
end
}

-----------------------------------------
------------- INLINE ASM ----------------
-----------------------------------------

-- (80)
ENTITE -> asm #tds ASM #gen; 
#tds {
do 
  -- A faire : Remplacer 'null' par la table courante pour que
  -- le code ASM puisse acceder aux variables de MC ou MCS
  ASM^tds_asm := null; 
end
}

#gen {
do
  -- On recupere le code assembleur 'inline' dans : ASM^code_asm ;
end
}


-- (81)
INST ->  asm   #tds ASM #gen ;
#tds {
do
  -- A remplacer par la table courante pour que
  -- l'assembleur puisse acceder aux variables
  ASM^tds_asm := null; 
end
}

#gen {
do
  -- ASM^code_asm contient le code assembleur inline
  -- dans lequel les noms de variables ont ete remplaces
  -- par leurs adresses.
end
}

----------------- CS extension --------------------
-- Decommenter les regles suivantes pour l'extension CS
-------------------------------------------------
--TYPE -> bool;
---- definit un contenu d'un namespace
--ENTITE -> namespace identc aco ENTITES acf ;
---- donne l acces au contenu du 'namespace'
--ENTITE -> using identc IDC pv ;
--IDC -> ;
--IDC -> pt identc IDC ;
---- definition d'une classe (peut etre en dehors d'un namespace)
--ENTITE -> ACCES class identc HERITAGE aco DEFS acf ;
---- acces 
--ACCES -> public;
--ACCES -> private;
--ACCES -> ;
---- heritage
--HERITAGE -> ;
--HERITAGE -> dpts identc IDC ;
---- membres d'une classe
--DEFS -> ;
--DEFS ->  ACCES DEF DEFS ;
--DEF  ->  TYPE ident DECL ;
---- constructeur
--DEF  ->  identc paro PARFS parf BASE BLOC;
---- appel eventuel au constructeur de la classe parente.
--BASE -> ;
--BASE -> dpts base paro ES parf  ;
---- Mode de passage pour les fonctions et méthodes : rien : D, ref : D/R, out : R
--PARF ->  MODE TYPE ident ;
--MODE -> ref ;
--MODE -> out ; 
--F -> true;
--F -> false;
--F -> this FX;
--F -> base FX;
--F -> null2;
--F -> new identc IDC paro ES parf ;
end
